π
XD:\Programacion\CSharp\WPF\EzWriter\EzWriterSpellCheckingEngine\Core\CorrectiveAction.cs
	namespace 	'
EzWriterSpellCheckingEngine
 %
.% &
Core& *
{ 
public 

enum 
CorrectiveAction  
{ 
None 
, 
GetSuggestions 
, 
Replace 
, 
Delete 
} 
} ùa
TD:\Programacion\CSharp\WPF\EzWriter\EzWriterSpellCheckingEngine\Core\SpellChecker.cs
	namespace 	'
EzWriterSpellCheckingEngine
 %
.% &
Core& *
{ 
public 

class 
SpellChecker 
: 
IDisposable  +
{ 
private 
ISpellChecker 
spellChecker *
;* +
public 
SpellChecker 
( 
) 
{ 	
var 
factory 
= 
new 
SpellCheckerFactory 1
(1 2
)2 3
;3 4
try 
{ 
spellChecker 
= 
factory &
.& '
CreateSpellChecker' 9
(9 :
CultureInfo: E
.E F
CurrentCultureF T
.T U
NameU Y
)Y Z
;Z [
} 
finally 
{ 
Marshal 
. 
ReleaseComObject (
(( )
factory) 0
)0 1
;1 2
} 
}   	
public'' 
SpellChecker'' 
('' 
string'' "
languageTag''# .
)''. /
{(( 	
var)) 
factory)) 
=)) 
new)) 
SpellCheckerFactory)) 1
())1 2
)))2 3
;))3 4
try++ 
{,, 
spellChecker-- 
=-- 
factory-- &
.--& '
CreateSpellChecker--' 9
(--9 :
languageTag--: E
)--E F
;--F G
}// 
finally00 
{11 
Marshal22 
.22 
ReleaseComObject22 (
(22( )
factory22) 0
)220 1
;221 2
}33 
}44 	
public:: 
static:: 
bool:: 
IsPlatformSupported:: .
(::. /
)::/ 0
=>;; 
Environment;; 
.;; 
	OSVersion;; $
.;;$ %
Version;;% ,
.;;, -
Major;;- 2
>;;3 4
$num;;5 6
||;;7 9
(;;: ;
Environment;;; F
.;;F G
	OSVersion;;G P
.;;P Q
Version;;Q X
.;;X Y
Major;;Y ^
==;;_ a
$num;;b c
&&;;d f
Environment;;g r
.;;r s
	OSVersion;;s |
.;;| }
Version	;;} Ñ
.
;;Ñ Ö
Minor
;;Ö ä
>=
;;ã ç
$num
;;é è
)
;;è ê
;
;;ê ë
publicBB 
staticBB 
boolBB 
IsLanguageSupportedBB .
(BB. /
stringBB/ 5
languageTagBB6 A
)BBA B
{CC 	
varDD 
factoryDD 
=DD 
newDD 
SpellCheckerFactoryDD 1
(DD1 2
)DD2 3
;DD3 4
tryFF 
{GG 
returnHH 
factoryHH 
.HH 
IsSupportedHH *
(HH* +
languageTagHH+ 6
)HH6 7
!=HH8 :
$numHH; <
;HH< =
}II 
finallyJJ 
{KK 
MarshalLL 
.LL 
ReleaseComObjectLL (
(LL( )
factoryLL) 0
)LL0 1
;LL1 2
}MM 
}NN 	
publicSS 
staticSS 
IEnumerableSS !
<SS! "
stringSS" (
>SS( )
SupportedLanguagesSS* <
{TT 	
getUU 
{VV 
varWW 
factoryWW 
=WW 
newWW !
SpellCheckerFactoryWW" 5
(WW5 6
)WW6 7
;WW7 8
IEnumStringXX 
	languagesXX %
=XX& '
nullXX( ,
;XX, -
tryZZ 
{[[ 
	languages\\ 
=\\ 
factory\\  '
.\\' (
SupportedLanguages\\( :
;\\: ;
	languages]] 
.]] 

RemoteNext]] (
(]]( )
$num]]) *
,]]* +
out]], /
string]]0 6
currentLanguage]]7 F
,]]F G
out]]H K
uint]]L P
fetched]]Q X
)]]X Y
;]]Y Z
while__ 
(__ 
currentLanguage__ *
!=__+ -
null__. 2
)__2 3
{`` 
yieldaa 
returnaa $
currentLanguageaa% 4
;aa4 5
	languagesbb !
.bb! "

RemoteNextbb" ,
(bb, -
$numbb- .
,bb. /
outbb0 3
currentLanguagebb4 C
,bbC D
outbbE H
fetchedbbI P
)bbP Q
;bbQ R
}cc 
}dd 
finallyee 
{ff 
ifgg 
(gg 
	languagesgg !
!=gg" $
nullgg% )
)gg) *
{hh 
Marshalii 
.ii  
ReleaseComObjectii  0
(ii0 1
	languagesii1 :
)ii: ;
;ii; <
}jj 
Marshalkk 
.kk 
ReleaseComObjectkk ,
(kk, -
factorykk- 4
)kk4 5
;kk5 6
}ll 
}mm 
}nn 	
publicss 
stringss 
LanguageTagss !
=>ss" $
spellCheckerss% 1
.ss1 2
languageTagss2 =
;ss= >
publiczz 
voidzz 
Addzz 
(zz 
stringzz 
wordzz #
)zz# $
=>zz% '
spellCheckerzz( 4
.zz4 5
Addzz5 8
(zz8 9
wordzz9 =
)zz= >
;zz> ?
public
ÅÅ 
void
ÅÅ 
AutoCorrect
ÅÅ 
(
ÅÅ  
string
ÅÅ  &
from
ÅÅ' +
,
ÅÅ+ ,
string
ÅÅ- 3
to
ÅÅ4 6
)
ÅÅ6 7
=>
ÅÅ8 :
spellChecker
ÅÅ; G
.
ÅÅG H
AutoCorrect
ÅÅH S
(
ÅÅS T
from
ÅÅT X
,
ÅÅX Y
to
ÅÅZ \
)
ÅÅ\ ]
;
ÅÅ] ^
public
àà 
IEnumerable
àà 
<
àà 
SpellingError
àà (
>
àà( )
Check
àà* /
(
àà/ 0
string
àà0 6
text
àà7 ;
)
àà; <
{
ââ 	
var
ää 
errors
ää 
=
ää 
spellChecker
ää %
.
ää% &
Check
ää& +
(
ää+ ,
text
ää, 0
)
ää0 1
;
ää1 2
ISpellingError
ãã 
currentError
ãã '
=
ãã( )
null
ãã* .
;
ãã. /
try
çç 
{
éé 
while
èè 
(
èè 
(
èè 
currentError
èè $
=
èè% &
errors
èè' -
.
èè- .
Next
èè. 2
(
èè2 3
)
èè3 4
)
èè4 5
!=
èè6 8
null
èè9 =
)
èè= >
{
êê 
var
ëë 
action
ëë 
=
ëë  
CorrectiveAction
ëë! 1
.
ëë1 2
None
ëë2 6
;
ëë6 7
switch
ìì 
(
ìì 
currentError
ìì (
.
ìì( )
CorrectiveAction
ìì) 9
)
ìì9 :
{
îî 
case
ïï 
CORRECTIVE_ACTION
ïï .
.
ïï. //
!CORRECTIVE_ACTION_GET_SUGGESTIONS
ïï/ P
:
ïïP Q
action
ïïR X
=
ïïY Z
CorrectiveAction
ïï[ k
.
ïïk l
GetSuggestions
ïïl z
;
ïïz {
breakïï| Å
;ïïÅ Ç
case
óó 
CORRECTIVE_ACTION
óó .
.
óó. /'
CORRECTIVE_ACTION_REPLACE
óó/ H
:
óóH I
action
óóJ P
=
óóQ R
CorrectiveAction
óóS c
.
óóc d
Replace
óód k
;
óók l
break
óóm r
;
óór s
case
ôô 
CORRECTIVE_ACTION
ôô .
.
ôô. /&
CORRECTIVE_ACTION_DELETE
ôô/ G
:
ôôG H
action
ôôI O
=
ôôP Q
CorrectiveAction
ôôR b
.
ôôb c
Delete
ôôc i
;
ôôi j
break
ôôk p
;
ôôp q
}
öö 
yield
õõ 
return
õõ  
new
õõ! $
SpellingError
õõ% 2
{
úú 

StartIndex
ùù "
=
ùù# $
(
ùù% &
int
ùù& )
)
ùù) *
currentError
ùù* 6
.
ùù6 7

StartIndex
ùù7 A
,
ùùA B
Length
ûû 
=
ûû  
(
ûû! "
int
ûû" %
)
ûû% &
currentError
ûû& 2
.
ûû2 3
Length
ûû3 9
,
ûû9 :
CorrectiveAction
üü (
=
üü) *
action
üü+ 1
,
üü1 2
Replacement
†† #
=
††$ %
currentError
††& 2
.
††2 3
Replacement
††3 >
}
°° 
;
°° 
Marshal
¢¢ 
.
¢¢ 
ReleaseComObject
¢¢ ,
(
¢¢, -
currentError
¢¢- 9
)
¢¢9 :
;
¢¢: ;
}
££ 
}
§§ 
finally
•• 
{
¶¶ 
if
ßß 
(
ßß 
currentError
ßß  
!=
ßß! #
null
ßß$ (
)
ßß( )
{
®® 
Marshal
©© 
.
©© 
ReleaseComObject
©© ,
(
©©, -
currentError
©©- 9
)
©©9 :
;
©©: ;
}
™™ 
Marshal
´´ 
.
´´ 
ReleaseComObject
´´ (
(
´´( )
errors
´´) /
)
´´/ 0
;
´´0 1
}
¨¨ 
}
≠≠ 	
public
¥¥ 
IEnumerable
¥¥ 
<
¥¥ 
string
¥¥ !
>
¥¥! "
GetSuggestions
¥¥# 1
(
¥¥1 2
string
¥¥2 8
word
¥¥9 =
)
¥¥= >
{
µµ 	
var
∂∂ 
suggestions
∂∂ 
=
∂∂ 
spellChecker
∂∂ *
.
∂∂* +
Suggest
∂∂+ 2
(
∂∂2 3
word
∂∂3 7
)
∂∂7 8
;
∂∂8 9
try
∏∏ 
{
ππ 
suggestions
∫∫ 
.
∫∫ 

RemoteNext
∫∫ &
(
∫∫& '
$num
∫∫' (
,
∫∫( )
out
∫∫* -
string
∫∫. 4
currentSuggestion
∫∫5 F
,
∫∫F G
out
∫∫H K
uint
∫∫L P
fetched
∫∫Q X
)
∫∫X Y
;
∫∫Y Z
while
ºº 
(
ºº 
currentSuggestion
ºº (
!=
ºº) +
null
ºº, 0
)
ºº0 1
{
ΩΩ 
yield
ææ 
return
ææ  
currentSuggestion
ææ! 2
;
ææ2 3
suggestions
øø 
.
øø  

RemoteNext
øø  *
(
øø* +
$num
øø+ ,
,
øø, -
out
øø. 1
currentSuggestion
øø2 C
,
øøC D
out
øøE H
fetched
øøI P
)
øøP Q
;
øøQ R
}
¿¿ 
}
¡¡ 
finally
¬¬ 
{
√√ 
Marshal
ƒƒ 
.
ƒƒ 
ReleaseComObject
ƒƒ (
(
ƒƒ( )
suggestions
ƒƒ) 4
)
ƒƒ4 5
;
ƒƒ5 6
}
≈≈ 
}
∆∆ 	
public
ÃÃ 
void
ÃÃ 
Ignore
ÃÃ 
(
ÃÃ 
string
ÃÃ !
word
ÃÃ" &
)
ÃÃ& '
=>
ÃÃ( *
spellChecker
ÃÃ+ 7
.
ÃÃ7 8
Ignore
ÃÃ8 >
(
ÃÃ> ?
word
ÃÃ? C
)
ÃÃC D
;
ÃÃD E
public
—— 
void
—— 
Dispose
—— 
(
—— 
)
—— 
{
““ 	
Dispose
”” 
(
”” 
true
”” 
)
”” 
;
”” 
GC
‘‘ 
.
‘‘ 
SuppressFinalize
‘‘ 
(
‘‘  
this
‘‘  $
)
‘‘$ %
;
‘‘% &
}
’’ 	
private
€€ 
void
€€ 
Dispose
€€ 
(
€€ 
bool
€€ !
	disposing
€€" +
)
€€+ ,
{
‹‹ 	
if
›› 
(
›› 
spellChecker
›› 
!=
›› 
null
››  $
)
››$ %
{
ﬁﬁ 
Marshal
ﬂﬂ 
.
ﬂﬂ 
ReleaseComObject
ﬂﬂ (
(
ﬂﬂ( )
spellChecker
ﬂﬂ) 5
)
ﬂﬂ5 6
;
ﬂﬂ6 7
spellChecker
‡‡ 
=
‡‡ 
null
‡‡ #
;
‡‡# $
}
·· 
}
‚‚ 	
~
ÁÁ 	
SpellChecker
ÁÁ	 
(
ÁÁ 
)
ÁÁ 
=>
ÁÁ 
Dispose
ÁÁ "
(
ÁÁ" #
false
ÁÁ# (
)
ÁÁ( )
;
ÁÁ) *
}
ËË 
}ÈÈ á
UD:\Programacion\CSharp\WPF\EzWriter\EzWriterSpellCheckingEngine\Core\SpellingError.cs
	namespace 	'
EzWriterSpellCheckingEngine
 %
.% &
Core& *
{ 
public 

class 
SpellingError 
{ 
public 
CorrectiveAction 
CorrectiveAction  0
{1 2
get3 6
;6 7
internal8 @
setA D
;D E
}F G
public 
int 
Length 
{ 
get 
;  
internal! )
set* -
;- .
}/ 0
public 
string 
Replacement !
{" #
get$ '
;' (
internal) 1
set2 5
;5 6
}7 8
public 
int 

StartIndex 
{ 
get  #
;# $
internal% -
set. 1
;1 2
}3 4
} 
} Ö
ZD:\Programacion\CSharp\WPF\EzWriter\EzWriterSpellCheckingEngine\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str 6
)6 7
]7 8
[ 
assembly 	
:	 

AssemblyDescription 
( 
$str !
)! "
]" #
[		 
assembly		 	
:			 
!
AssemblyConfiguration		  
(		  !
$str		! #
)		# $
]		$ %
[

 
assembly

 	
:

	 

AssemblyCompany

 
(

 
$str

 
)

 
]

 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str 8
)8 9
]9 :
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 0
)0 1
]1 2
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
["" 
assembly"" 	
:""	 

AssemblyVersion"" 
("" 
$str"" $
)""$ %
]""% &
[## 
assembly## 	
:##	 

AssemblyFileVersion## 
(## 
$str## (
)##( )
]##) *